/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package apka_do_malowania;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.JColorChooser;
import javax.swing.JPanel;
import java.awt.Point;
import javax.swing.JFileChooser;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;


/**
 *
 * @author Admin
 */
public class apka extends javax.swing.JFrame {

    Color brushColor = Color.BLACK;
    int old_mouse_x = 0;
    int old_mouse_y = 0;
    Graphics2D graphics2D;
    boolean draw_figure = false;
    int first_mouse_x = 0;
    int first_mouse_y = 0;
    int old_width = 0;
    int old_height = 0;
    int lpx[] = {};
    int lpy[] = {};
    int px;
    int py;
    int i = 0;
    int ppx;
    int ppy;
    private RysunekPanel rysunek;
    private ArrayList<Point> tymczasowePunkty = new ArrayList<>();
    
    /**
     * Creates new form apka
     */
    public apka() {
    initComponents();
    rysunek = new RysunekPanel();
    jPanel1.setLayout(new BorderLayout());
    jPanel1.add(rysunek, BorderLayout.CENTER);

    jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
        public void componentResized(java.awt.event.ComponentEvent evt) {
            rysunek.resizeCanvas(jPanel1.getWidth(), jPanel1.getHeight());
        }
    });
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        wyczysc = new javax.swing.JButton();
        kolor = new javax.swing.JButton();
        wybrany_kolor = new javax.swing.JTextField();
        grubosc_linii = new javax.swing.JComboBox<>();
        narzedzie = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        zapisz = new javax.swing.JButton();
        wczytaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 513, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(236, 236, 236));
        jPanel2.setPreferredSize(new java.awt.Dimension(250, 72));

        wyczysc.setText("Wyczyść");
        wyczysc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wyczyscMouseClicked(evt);
            }
        });
        wyczysc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wyczyscActionPerformed(evt);
            }
        });

        kolor.setText("Kolor");
        kolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kolorActionPerformed(evt);
            }
        });

        wybrany_kolor.setEditable(false);
        wybrany_kolor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wybrany_kolorActionPerformed(evt);
            }
        });

        grubosc_linii.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1px", "2px", "3px", "4px", "5px", "6px", "7px", "8px", "9px", "10px", "11px", "13px", "15px", "17px", "19px", "21px", "24px", "27px", "30px" }));

        narzedzie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ołówek", "Prostokąt", "Linia", "Okrąg", "Wielokąt" }));
        narzedzie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                narzedzieActionPerformed(evt);
            }
        });

        jLabel2.setText("Grubość linii");

        jLabel1.setText("Narzędzie");

        zapisz.setText("Zapisz");
        zapisz.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zapiszMouseClicked(evt);
            }
        });

        wczytaj.setText("Wczytaj");
        wczytaj.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wczytajMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(narzedzie, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                        .addGap(6, 6, 6))
                    .addComponent(grubosc_linii, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(kolor)
                .addGap(3, 3, 3)
                .addComponent(wybrany_kolor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 389, Short.MAX_VALUE)
                .addComponent(zapisz)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wczytaj)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                .addComponent(wyczysc, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(narzedzie, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grubosc_linii, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wyczysc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kolor)
                    .addComponent(wybrany_kolor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zapisz)
                    .addComponent(wczytaj))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1073, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void kolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kolorActionPerformed
        brushColor = JColorChooser.showDialog(null, "Wybierz kolor", brushColor);
        wybrany_kolor.setBackground(brushColor);
        
        if (brushColor != null) {
            wybrany_kolor.setBackground(brushColor);
            rysunek.ustawKolorPunktow(brushColor);
        }
    }//GEN-LAST:event_kolorActionPerformed

    private void wybrany_kolorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wybrany_kolorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wybrany_kolorActionPerformed

    private void narzedzieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_narzedzieActionPerformed
        
    }//GEN-LAST:event_narzedzieActionPerformed

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        old_mouse_x = evt.getX();
        old_mouse_y = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
       if (narzedzie.getSelectedIndex() == 0) {
           graphics2D = graphics2D = rysunek.getCanvasGraphics();
           if (graphics2D != null) {
               graphics2D.setColor(brushColor);
               graphics2D.setStroke(new BasicStroke(grubosc_linii.getSelectedIndex()+1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
               graphics2D.drawLine(old_mouse_x, old_mouse_y, evt.getX(), evt.getY());
           }
           old_mouse_x = evt.getX();
           old_mouse_y = evt.getY();
           
           rysunek.repaint();
           graphics2D.dispose();
       }
    }//GEN-LAST:event_jPanel1MouseDragged

    private void wyczyscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wyczyscActionPerformed
        
    }//GEN-LAST:event_wyczyscActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        if (narzedzie.getSelectedIndex() > 0 && narzedzie.getSelectedIndex() < 4 && draw_figure == false) {
            draw_figure = true;
            first_mouse_x = old_mouse_x;
            first_mouse_y = old_mouse_y;
            old_width = 0;
            old_height = 0;
        } else if (narzedzie.getSelectedIndex() > 0 && narzedzie.getSelectedIndex() < 4 && draw_figure == true) {
            draw_figure = false;
        } else if (narzedzie.getSelectedIndex() == 4 && draw_figure == false) {
            draw_figure = true;
            i = 0;
            lpx = new int[100];
            lpy = new int[100];
            tymczasowePunkty = new ArrayList<>();
            px = evt.getX();
            py = evt.getY();
            ppx = px;
            ppy = py;

            lpx[i] = px;
            lpy[i] = py;
            tymczasowePunkty.add(new Point(px, py));
            i++;

            rysunek.ustawTymczasowePunkty(tymczasowePunkty);
        }
        else if (narzedzie.getSelectedIndex() == 4 && draw_figure == true) {
            px = evt.getX();
            py = evt.getY();

            if (i > 2 && Math.abs(px - ppx) < 10 && Math.abs(py - ppy) < 10) {
                int[] lpxf = new int[i];
                int[] lpyf = new int[i];
                for (int z = 0; z < i; z++) {
                    lpxf[z] = lpx[z];
                    lpyf[z] = lpy[z];
                }

                Polygon polygon = new Polygon(lpxf, lpyf, i);
                graphics2D = rysunek.getCanvasGraphics();
                graphics2D.setColor(brushColor);
                graphics2D.fillPolygon(polygon);
                graphics2D.dispose();

                draw_figure = false;
                i = 0;
                tymczasowePunkty.clear();
                rysunek.ustawTymczasowePunkty(new ArrayList<>());
                rysunek.repaint();
            } else {
                lpx[i] = px;
                lpy[i] = py;
                tymczasowePunkty.add(new Point(px, py));
                i++;

                rysunek.ustawTymczasowePunkty(tymczasowePunkty);
            }
        }
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        if (draw_figure == true) {
            int a;
            int b;
            if (first_mouse_x < evt.getX()) {
                a = first_mouse_x;
            } else {
                a = evt.getX();
            }
            if (first_mouse_y < evt.getY()) {
                b = first_mouse_y;
            } else {
                b = evt.getY();
            }
            
            int width = evt.getX() - a;
            int height = evt.getY() - b;
            
            graphics2D = rysunek.getCanvasGraphics();
            
            if (narzedzie.getSelectedIndex() == 1) {
                graphics2D.setColor(Color.WHITE);
                graphics2D.fillRect(Math.min(first_mouse_x, old_mouse_x),
                                    Math.min(first_mouse_y, old_mouse_y),
                                    Math.abs(old_mouse_x - first_mouse_x),
                                    Math.abs(old_mouse_y - first_mouse_y));
                graphics2D.setColor(brushColor);
                graphics2D.fillRect(Math.min(first_mouse_x, evt.getX()),
                                    Math.min(first_mouse_y, evt.getY()),
                                    Math.abs(evt.getX() - first_mouse_x),
                                    Math.abs(evt.getY() - first_mouse_y));
            }
            
            if (narzedzie.getSelectedIndex() == 2) {
                graphics2D.setStroke(new BasicStroke(grubosc_linii.getSelectedIndex()+1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
                graphics2D.setColor(Color.WHITE);
                graphics2D.drawLine(first_mouse_x, first_mouse_y, old_mouse_x, old_mouse_y);
                graphics2D.setColor(brushColor);
                graphics2D.drawLine(first_mouse_x, first_mouse_y, evt.getX(), evt.getY());
            }
            
            if (narzedzie.getSelectedIndex() == 3) {
                graphics2D.setColor(Color.WHITE);
                graphics2D.fillOval(Math.min(first_mouse_x, old_mouse_x),
                                    Math.min(first_mouse_y, old_mouse_y),
                                    Math.abs(old_mouse_x - first_mouse_x),
                                    Math.abs(old_mouse_y - first_mouse_y));

                graphics2D.setColor(brushColor);
                graphics2D.fillOval(Math.min(first_mouse_x, evt.getX()),
                                    Math.min(first_mouse_y, evt.getY()),
                                    Math.abs(evt.getX() - first_mouse_x),
                                    Math.abs(evt.getY() - first_mouse_y));
            }

            
            if (narzedzie.getSelectedIndex() == 4) {
                //graphics2D.setColor(Color.WHITE);
                //graphics2D.drawLine(first_mouse_x, first_mouse_y, old_mouse_x, old_mouse_y);
                //graphics2D.setColor(brushColor);
                //graphics2D.drawLine(first_mouse_x, first_mouse_y, evt.getX(), evt.getY());
            }
            
            old_mouse_x = evt.getX();
            old_mouse_y = evt.getY();
            old_width = width;
            old_height = height;
            
            rysunek.repaint();
            graphics2D.dispose();
        }
    }//GEN-LAST:event_jPanel1MouseMoved

    private void wyczyscMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wyczyscMouseClicked
        rysunek.clearCanvas();
    }//GEN-LAST:event_wyczyscMouseClicked

    private void zapiszMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zapiszMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Zapisz obraz");

        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            if (!file.getName().toLowerCase().endsWith(".png")) {
                file = new File(file.getAbsolutePath() + ".png");
            }

            try {
                BufferedImage obraz = rysunek.getCanvas();
                ImageIO.write(obraz, "png", file);
                javax.swing.JOptionPane.showMessageDialog(this, 
                        "Obraz zapisano jako:\n" + file.getAbsolutePath(),
                        "Sukces", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                        "Błąd zapisu obrazu:\n" + ex.getMessage(),
                        "Błąd", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_zapiszMouseClicked

    private void wczytajMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wczytajMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Wczytaj obraz");

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            try {
                BufferedImage obrazek = ImageIO.read(file);
                if (obrazek != null) {
                    Graphics2D g2 = rysunek.getCanvasGraphics();
                    g2.drawImage(obrazek, 0, 0, null);
                    g2.dispose();
                    rysunek.repaint();
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Nie udało się odczytać pliku jako obrazka.",
                            "Błąd", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                        "Błąd podczas wczytywania:\n" + ex.getMessage(),
                        "Błąd", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_wczytajMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(apka.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(apka.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(apka.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(apka.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new apka().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> grubosc_linii;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton kolor;
    private javax.swing.JComboBox<String> narzedzie;
    private javax.swing.JButton wczytaj;
    private javax.swing.JTextField wybrany_kolor;
    private javax.swing.JButton wyczysc;
    private javax.swing.JButton zapisz;
    // End of variables declaration//GEN-END:variables
}

class RysunekPanel extends JPanel {
    private BufferedImage canvas;

    public RysunekPanel() {
        this.setBackground(Color.WHITE);
    }
    
    private Color kolorPunktow = Color.RED;

    public void ustawKolorPunktow(Color kolor) {
        this.kolorPunktow = kolor;
        repaint();
    }


    @Override
    public void addNotify() {
        super.addNotify();
        resizeCanvas(getWidth(), getHeight());
    }

    public void resizeCanvas(int width, int height) {
        if (width <= 0 || height <= 0) return;
        if (canvas == null) {
            canvas = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            clearCanvas();
        } else if (canvas.getWidth() != width || canvas.getHeight() != height) {
            BufferedImage newCanvas = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g = newCanvas.createGraphics();
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, width, height);
            g.drawImage(canvas, 0, 0, null);
            g.dispose();
            canvas = newCanvas;
        }
        repaint();
    }

    public Graphics2D getCanvasGraphics() {
        if (canvas == null) {
            resizeCanvas(getWidth(), getHeight());
        }
        return canvas.createGraphics();
    }


    public void clearCanvas() {
        if (canvas != null) {
            Graphics2D g2 = canvas.createGraphics();
            g2.setColor(Color.WHITE);
            g2.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());
            g2.dispose();
            repaint();
        }
    }
    
    private ArrayList<Point> tymczasowePunkty = new ArrayList<>();

    public void ustawTymczasowePunkty(ArrayList<Point> punkty) {
        this.tymczasowePunkty = punkty;
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (canvas != null) {
            g.drawImage(canvas, 0, 0, null);
        }

        if (tymczasowePunkty != null && tymczasowePunkty.size() > 1) {
            Graphics2D g2d = (Graphics2D) g;
            g2d.setColor(Color.GRAY);
            g2d.setStroke(new BasicStroke(1));

            for (int i = 0; i < tymczasowePunkty.size() - 1; i++) {
                Point p1 = tymczasowePunkty.get(i);
                Point p2 = tymczasowePunkty.get(i + 1);
                g2d.drawLine(p1.x, p1.y, p2.x, p2.y);
            }
            
            g2d.setColor(kolorPunktow);
            for (Point p : tymczasowePunkty) {
                g2d.fillOval(p.x - 4, p.y - 4, 8, 8);
                g2d.setColor(new Color(
                    Math.max(0, kolorPunktow.getRed() - 60),
                    Math.max(0, kolorPunktow.getGreen() - 60),
                    Math.max(0, kolorPunktow.getBlue() - 60)
                ));
                g2d.drawOval(p.x - 4, p.y - 4, 8, 8);
                g2d.setColor(kolorPunktow);
            }
        }
    }


    public BufferedImage getCanvas() {
        return canvas;
    }
}
